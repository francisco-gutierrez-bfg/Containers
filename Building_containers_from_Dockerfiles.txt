Building Container from dockerfiles:
====================================

Considerations:
===============

1- The files muste be called exactly like this: Dockerfile
   The "D" must be uppercase.
2- Please create a folder by project.

Examples:


1- Dockerfile simple apache sample:

   # A basic apache server.
   FROM ubuntu:20.04
   MAINTAINER Daniel Castillo version: 0.1
   RUN apt-get update && apt-get install -y apache2 && apt-get clean && rm -rf /var/lib/apt/lists/*
   ENV APACHE_RUN_USER www-data
   ENV APACHE_RUN_GROUP www-data
   ENV APACHE_LOG_DIR /var/log/apache2
   EXPOSE 80

   CMD ["/usr/sbin/apache2", "-D", "FOREGROUND"]


2- Dockerfile simple apache and php sample:

   FROM ubuntu:20.04
   MAINTAINER Daniel Castillo: 0.1
   RUN apt-get update && apt-get install -y php5 libapache2-mod-php5 php5-mysql php5-cli && apt-get clean && rm -rf /var/lib/apt/lists/*
   CMD ["/usr/sbin/apache2", "-D", "FOREGROUND"]

3- Now, lets put source code inside a php and apache container 
   while the building process is running:

   Place the source code inside the folder where the Dockerfiles resides.
   Eg:
    NEW_PROJECT
     |_Dockerfile
     |_new_website_source_code
   Here we a parent folder called "NEW_PROJECT", inside we have a "Dockerfile" and a subfolder
   called "new_website_source_code" with a new website ready to be deployed.

   Dockerfile to deploy apache, php and a web app, sample:
   
   FROM ubuntu:20.04
   MAINTAINER Daniel Castillo: 0.2
   
   RUN apt-get update \
     && apt-get install -y php5 libapache2-mod-php5 php5-mysql php5-cli \
     && apt-get clean \
     && rm -rf /var/lib/apt/lists/* 
   
   COPY new_website_source_code /var/www/html/new_site
   RUN chmod 775 /var/www/html/new_site
   
   CMD ["/usr/sbin/apache2", "-D", "FOREGROUND"]
   
4- Implementing a tomcat service "please check the sample folder taht comes with this file,
   called "tomcat_container_sample"

   Note: This project has a subfolder called settings where the configuration files are placed.

   Decokerfile to deploy a tomcat server and setting initial tomcat parameters:
   
   FROM ubuntu:latest
   # OS update and package installation process
   RUN apt update \
     && apt-get -y install openjdk-8-jdk wget \
     && mkdir /usr/local/tomcat \
     && wget https://downloads.apache.org/tomcat/tomcat-9/v9.0.43/bin/apache-tomcat-9.0.43.tar.gz -O /tmp/tomcat.tar.gz \
     && cd /tmp && tar xvfz tomcat.tar.gz \
     && mv /tmp/apache-tomcat-9.0.43 /tmp/tomcat
     && cp -Rv /tmp/tomcat/* /usr/local/tomcat/ \
     && rm -rf /tmp/tomcat \
     # Cleanup apt
     ###
     && apt-get clean \
     && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

     WORKDIR /usr/local/tomcat
     # Copy tomcat users file to destination
     # username: tomcat
     # password: s3cr3t
     # default role: manager-gui, manager-script
     COPY settings/tomcat-users.xml /usr/local/tomcat/conf/tomcat-users.xml
     COPY settings/context.xml /usr/local/tomcat/webapps/manager/META-INF/context.xml
     COPY settings/manager.xml /usr/local/tomcat/conf/manager.xml

     # Deploying a sample application
     # Add an application to tomcat from your location to the container.
     ADD settings/sample.war /usr/local/tomcat/webapps/

     EXPOSE 8080
     CMD ["/usr/local/tomcat/bin/catalina.sh", "run"]


